import { ConvertValueTypesOfMappedTypeToSpecifiedType } from './types';
declare function isFunction(
  maybeFunc: Function | unknown,
): maybeFunc is Function;
type KeySecretValueObject = {
  [key: string]: Secret<unknown>;
};
/**
 * The `Secret<T>` class represents a container for managing a secret value of type `T`.
 * It allows limited exposure of the secret, optionally generated by a function, based on a maximum expose count.
 *
 * @template T - The type of the secret value.
 */
declare class Secret<T> {
  #private;
  /**
   * Creates a new `Secret` instance.
   *
   * @param {T | undefined} secret - The initial secret value (optional).
   * @param {(...args: any[]) => T | undefined} func - A function to generate the secret value (optional).
   * @param {number} max_expose_count - The maximum number of times the secret can be exposed (optional).
   * @param {any[]} func_args - Additional arguments to pass to the function when generating the secret.
   *
   * @throws {Error} Either `secret` or `func` must be specified.
   * @throws {Error} Only `secret` or `func` should be specified, not both.
   */
  constructor(
    secret?: T | null, // Allow secret to explicitly be null
    func?: (...args: any[]) => T | undefined,
    max_expose_count?: number,
    ...func_args: any[]
  );
  /**
   * Returns a string representation of the `Secret` instance.
   *
   * @returns {string} A string in the format "Secret<T>" indicating the type of the inner secret.
   */
  toString(): string;
  /**
   * Exposes the secret value, subject to the maximum expose count.
   *
   * @returns {T | undefined | null} The secret value if it can be exposed, or `undefined` if the maximum expose count is reached.
   */
  exposeSecret(): T | undefined | null;
  /**
   * Gets the maximum allowed expose count for the secret.
   *
   * @returns {number | undefined} The maximum expose count.
   */
  get max_expose_count(): number | undefined;
  /**
   * Gets the current expose count for the secret.
   *
   * @returns {number} The current expose count.
   */
  get expose_count(): number;
  /**
   * Create a new Secret instance by reading key-value pairs from a file and extracting the value for the specified key.
   *
   * @param filePath - The path to the text file containing key-value pairs.
   * @param targetKey - The key to extract the value for.
   * @param maxExposeCount - The maximum number of times the secret can be exposed for.
   * @returns A new Secret instance with the extracted value, or undefined if the key is not found.
   */
  static fromFile(
    filePath: string,
    targetKey: string,
    maxExposeCount?: number | undefined,
  ): Secret<string>;
  /**
   * Parses a key-value file and returns an object where values are instances of the `Secret` class.
   *
   * @template SecretObjType - The type of the object to be returned (default is `KeySecretValueObject`).
   * @param {string} filePath - The path to the key-value file.
   * @param {number | undefined} maxExposeCount - The maximum number of times the secret can be exposed.
   * @returns {SecretObjType} An object containing key-value pairs with values wrapped in `Secret` instances.
   */
  static parseKeyValueFileIntoObjectOfKeySecret<
    SecretObjType extends KeySecretValueObject,
  >(
    filePath: string,
    maxExposeCount?:
      | ConvertValueTypesOfMappedTypeToSpecifiedType<
          SecretObjType,
          number | undefined
        >
      | number
      | undefined,
  ): SecretObjType;
}
export { Secret, isFunction };
